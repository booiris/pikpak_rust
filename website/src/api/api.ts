/* tslint:disable */
/* eslint-disable */
/**
 * server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: booiris02@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BaseResp
 */
export interface BaseResp {
    /**
     * 
     * @type {number}
     * @memberof BaseResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof BaseResp
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface DownloadBeginReq
 */
export interface DownloadBeginReq {
    /**
     * 
     * @type {string}
     * @memberof DownloadBeginReq
     */
    'file_id': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadBeginReq
     */
    'output_dir': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadBeginReq
     */
    'rename': string;
}
/**
 * 
 * @export
 * @interface DownloadBeginResp
 */
export interface DownloadBeginResp {
    /**
     * 
     * @type {number}
     * @memberof DownloadBeginResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadBeginResp
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface DownloadPauseReq
 */
export interface DownloadPauseReq {
    /**
     * 
     * @type {string}
     * @memberof DownloadPauseReq
     */
    'file_id': string;
}
/**
 * 
 * @export
 * @interface DownloadPauseResp
 */
export interface DownloadPauseResp {
    /**
     * 
     * @type {number}
     * @memberof DownloadPauseResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadPauseResp
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface DownloadRemoveReq
 */
export interface DownloadRemoveReq {
    /**
     * 
     * @type {string}
     * @memberof DownloadRemoveReq
     */
    'file_id': string;
    /**
     * 
     * @type {boolean}
     * @memberof DownloadRemoveReq
     */
    'need_remove_file': boolean;
}
/**
 * 
 * @export
 * @interface DownloadRemoveResp
 */
export interface DownloadRemoveResp {
    /**
     * 
     * @type {number}
     * @memberof DownloadRemoveResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadRemoveResp
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface DownloadResumeReq
 */
export interface DownloadResumeReq {
    /**
     * 
     * @type {string}
     * @memberof DownloadResumeReq
     */
    'file_id': string;
}
/**
 * 
 * @export
 * @interface DownloadResumeResp
 */
export interface DownloadResumeResp {
    /**
     * 
     * @type {number}
     * @memberof DownloadResumeResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadResumeResp
     */
    'message': string;
}
/**
 * @type DownloadStatusEnum
 * @export
 */
export type DownloadStatusEnum = DownloadStatusEnumOneOf | string;

/**
 * 
 * @export
 * @interface DownloadStatusEnumOneOf
 */
export interface DownloadStatusEnumOneOf {
    /**
     * 
     * @type {string}
     * @memberof DownloadStatusEnumOneOf
     */
    'HasError': string;
}
/**
 * 
 * @export
 * @interface DownloadStatusType
 */
export interface DownloadStatusType {
    /**
     * 
     * @type {number}
     * @memberof DownloadStatusType
     */
    'current_speed': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadStatusType
     */
    'download_to_local_path': string;
    /**
     * 
     * @type {number}
     * @memberof DownloadStatusType
     */
    'downloaded': number;
    /**
     * 
     * @type {number}
     * @memberof DownloadStatusType
     */
    'downloaded_time': number;
    /**
     * 
     * @type {string}
     * @memberof DownloadStatusType
     */
    'file_id': string;
    /**
     * 
     * @type {string}
     * @memberof DownloadStatusType
     */
    'remote_file_name': string;
    /**
     * 
     * @type {DownloadStatusEnum}
     * @memberof DownloadStatusType
     */
    'status': DownloadStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof DownloadStatusType
     */
    'total': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Filter = {
    Downloading: 'Downloading',
    Paused: 'Paused',
    Completed: 'Completed',
    Waiting: 'Waiting',
    HasError: 'HasError'
} as const;

export type Filter = typeof Filter[keyof typeof Filter];


/**
 * 
 * @export
 * @interface LoginReq
 */
export interface LoginReq {
    /**
     * 
     * @type {string}
     * @memberof LoginReq
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginReq
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResp
 */
export interface LoginResp {
    /**
     * 
     * @type {number}
     * @memberof LoginResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof LoginResp
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResp
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface MgetDownloadStatusReq
 */
export interface MgetDownloadStatusReq {
    /**
     * 
     * @type {Array<Filter>}
     * @memberof MgetDownloadStatusReq
     */
    'filter'?: Array<Filter> | null;
}
/**
 * 
 * @export
 * @interface MgetDownloadStatusResp
 */
export interface MgetDownloadStatusResp {
    /**
     * 
     * @type {number}
     * @memberof MgetDownloadStatusResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof MgetDownloadStatusResp
     */
    'message': string;
    /**
     * 
     * @type {Array<DownloadStatusType>}
     * @memberof MgetDownloadStatusResp
     */
    'download_status': Array<DownloadStatusType>;
}
/**
 * 
 * @export
 * @interface RemoteListFileStatus
 */
export interface RemoteListFileStatus {
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'created_time': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'file_extension': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'icon_link': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'kind': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'md5_checksum': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'mime_type': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'modified_time': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'parent_id': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'phase': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'size': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'thumbnail_link': string;
    /**
     * 
     * @type {string}
     * @memberof RemoteListFileStatus
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface RemoteListReq
 */
export interface RemoteListReq {
    /**
     * 
     * @type {string}
     * @memberof RemoteListReq
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface RemoteListResp
 */
export interface RemoteListResp {
    /**
     * 
     * @type {number}
     * @memberof RemoteListResp
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof RemoteListResp
     */
    'message': string;
    /**
     * 
     * @type {Array<RemoteListFileStatus>}
     * @memberof RemoteListResp
     */
    'files_info': Array<RemoteListFileStatus>;
}

/**
 * DownloadBeginApi - axios parameter creator
 * @export
 */
export const DownloadBeginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DownloadBeginReq} downloadBeginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBegin: async (downloadBeginReq: DownloadBeginReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadBeginReq' is not null or undefined
            assertParamExists('downloadBegin', 'downloadBeginReq', downloadBeginReq)
            const localVarPath = `/api/download_begin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadBeginReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadBeginApi - functional programming interface
 * @export
 */
export const DownloadBeginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadBeginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DownloadBeginReq} downloadBeginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadBegin(downloadBeginReq: DownloadBeginReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadBeginResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadBegin(downloadBeginReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadBeginApi.downloadBegin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DownloadBeginApi - factory interface
 * @export
 */
export const DownloadBeginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadBeginApiFp(configuration)
    return {
        /**
         * 
         * @param {DownloadBeginReq} downloadBeginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBegin(downloadBeginReq: DownloadBeginReq, options?: any): AxiosPromise<DownloadBeginResp> {
            return localVarFp.downloadBegin(downloadBeginReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadBeginApi - object-oriented interface
 * @export
 * @class DownloadBeginApi
 * @extends {BaseAPI}
 */
export class DownloadBeginApi extends BaseAPI {
    /**
     * 
     * @param {DownloadBeginReq} downloadBeginReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadBeginApi
     */
    public downloadBegin(downloadBeginReq: DownloadBeginReq, options?: RawAxiosRequestConfig) {
        return DownloadBeginApiFp(this.configuration).downloadBegin(downloadBeginReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DownloadPauseApi - axios parameter creator
 * @export
 */
export const DownloadPauseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DownloadPauseReq} downloadPauseReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPause: async (downloadPauseReq: DownloadPauseReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadPauseReq' is not null or undefined
            assertParamExists('downloadPause', 'downloadPauseReq', downloadPauseReq)
            const localVarPath = `/api/download_pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadPauseReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadPauseApi - functional programming interface
 * @export
 */
export const DownloadPauseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadPauseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DownloadPauseReq} downloadPauseReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadPause(downloadPauseReq: DownloadPauseReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadPauseResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadPause(downloadPauseReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadPauseApi.downloadPause']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DownloadPauseApi - factory interface
 * @export
 */
export const DownloadPauseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadPauseApiFp(configuration)
    return {
        /**
         * 
         * @param {DownloadPauseReq} downloadPauseReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadPause(downloadPauseReq: DownloadPauseReq, options?: any): AxiosPromise<DownloadPauseResp> {
            return localVarFp.downloadPause(downloadPauseReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadPauseApi - object-oriented interface
 * @export
 * @class DownloadPauseApi
 * @extends {BaseAPI}
 */
export class DownloadPauseApi extends BaseAPI {
    /**
     * 
     * @param {DownloadPauseReq} downloadPauseReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadPauseApi
     */
    public downloadPause(downloadPauseReq: DownloadPauseReq, options?: RawAxiosRequestConfig) {
        return DownloadPauseApiFp(this.configuration).downloadPause(downloadPauseReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DownloadRemoveApi - axios parameter creator
 * @export
 */
export const DownloadRemoveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DownloadRemoveReq} downloadRemoveReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemove: async (downloadRemoveReq: DownloadRemoveReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadRemoveReq' is not null or undefined
            assertParamExists('downloadRemove', 'downloadRemoveReq', downloadRemoveReq)
            const localVarPath = `/api/download_remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadRemoveReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadRemoveApi - functional programming interface
 * @export
 */
export const DownloadRemoveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadRemoveApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DownloadRemoveReq} downloadRemoveReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadRemove(downloadRemoveReq: DownloadRemoveReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadRemoveResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadRemove(downloadRemoveReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadRemoveApi.downloadRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DownloadRemoveApi - factory interface
 * @export
 */
export const DownloadRemoveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadRemoveApiFp(configuration)
    return {
        /**
         * 
         * @param {DownloadRemoveReq} downloadRemoveReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadRemove(downloadRemoveReq: DownloadRemoveReq, options?: any): AxiosPromise<DownloadRemoveResp> {
            return localVarFp.downloadRemove(downloadRemoveReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadRemoveApi - object-oriented interface
 * @export
 * @class DownloadRemoveApi
 * @extends {BaseAPI}
 */
export class DownloadRemoveApi extends BaseAPI {
    /**
     * 
     * @param {DownloadRemoveReq} downloadRemoveReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadRemoveApi
     */
    public downloadRemove(downloadRemoveReq: DownloadRemoveReq, options?: RawAxiosRequestConfig) {
        return DownloadRemoveApiFp(this.configuration).downloadRemove(downloadRemoveReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DownloadResumeApi - axios parameter creator
 * @export
 */
export const DownloadResumeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DownloadResumeReq} downloadResumeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadResume: async (downloadResumeReq: DownloadResumeReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'downloadResumeReq' is not null or undefined
            assertParamExists('downloadResume', 'downloadResumeReq', downloadResumeReq)
            const localVarPath = `/api/download_resume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(downloadResumeReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DownloadResumeApi - functional programming interface
 * @export
 */
export const DownloadResumeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DownloadResumeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DownloadResumeReq} downloadResumeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadResume(downloadResumeReq: DownloadResumeReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DownloadResumeResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadResume(downloadResumeReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DownloadResumeApi.downloadResume']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DownloadResumeApi - factory interface
 * @export
 */
export const DownloadResumeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DownloadResumeApiFp(configuration)
    return {
        /**
         * 
         * @param {DownloadResumeReq} downloadResumeReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadResume(downloadResumeReq: DownloadResumeReq, options?: any): AxiosPromise<DownloadResumeResp> {
            return localVarFp.downloadResume(downloadResumeReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DownloadResumeApi - object-oriented interface
 * @export
 * @class DownloadResumeApi
 * @extends {BaseAPI}
 */
export class DownloadResumeApi extends BaseAPI {
    /**
     * 
     * @param {DownloadResumeReq} downloadResumeReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DownloadResumeApi
     */
    public downloadResume(downloadResumeReq: DownloadResumeReq, options?: RawAxiosRequestConfig) {
        return DownloadResumeApiFp(this.configuration).downloadResume(downloadResumeReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginReq} loginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginReq: LoginReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginReq' is not null or undefined
            assertParamExists('login', 'loginReq', loginReq)
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginReq} loginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginReq: LoginReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginReq} loginReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginReq: LoginReq, options?: any): AxiosPromise<LoginResp> {
            return localVarFp.login(loginReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {LoginReq} loginReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public login(loginReq: LoginReq, options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).login(loginReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MgetDownloadStatusApi - axios parameter creator
 * @export
 */
export const MgetDownloadStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MgetDownloadStatusReq} mgetDownloadStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mgetDownloadStatus: async (mgetDownloadStatusReq: MgetDownloadStatusReq, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mgetDownloadStatusReq' is not null or undefined
            assertParamExists('mgetDownloadStatus', 'mgetDownloadStatusReq', mgetDownloadStatusReq)
            const localVarPath = `/api/mget_download_status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mgetDownloadStatusReq, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MgetDownloadStatusApi - functional programming interface
 * @export
 */
export const MgetDownloadStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MgetDownloadStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MgetDownloadStatusReq} mgetDownloadStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mgetDownloadStatus(mgetDownloadStatusReq: MgetDownloadStatusReq, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MgetDownloadStatusResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mgetDownloadStatus(mgetDownloadStatusReq, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MgetDownloadStatusApi.mgetDownloadStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MgetDownloadStatusApi - factory interface
 * @export
 */
export const MgetDownloadStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MgetDownloadStatusApiFp(configuration)
    return {
        /**
         * 
         * @param {MgetDownloadStatusReq} mgetDownloadStatusReq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mgetDownloadStatus(mgetDownloadStatusReq: MgetDownloadStatusReq, options?: any): AxiosPromise<MgetDownloadStatusResp> {
            return localVarFp.mgetDownloadStatus(mgetDownloadStatusReq, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MgetDownloadStatusApi - object-oriented interface
 * @export
 * @class MgetDownloadStatusApi
 * @extends {BaseAPI}
 */
export class MgetDownloadStatusApi extends BaseAPI {
    /**
     * 
     * @param {MgetDownloadStatusReq} mgetDownloadStatusReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MgetDownloadStatusApi
     */
    public mgetDownloadStatus(mgetDownloadStatusReq: MgetDownloadStatusReq, options?: RawAxiosRequestConfig) {
        return MgetDownloadStatusApiFp(this.configuration).mgetDownloadStatus(mgetDownloadStatusReq, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RemoteListApi - axios parameter creator
 * @export
 */
export const RemoteListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteList: async (path: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('remoteList', 'path', path)
            const localVarPath = `/api/remote_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemoteListApi - functional programming interface
 * @export
 */
export const RemoteListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemoteListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remoteList(path: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoteListResp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remoteList(path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemoteListApi.remoteList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RemoteListApi - factory interface
 * @export
 */
export const RemoteListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemoteListApiFp(configuration)
    return {
        /**
         * 
         * @param {string} path 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remoteList(path: string, options?: any): AxiosPromise<RemoteListResp> {
            return localVarFp.remoteList(path, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RemoteListApi - object-oriented interface
 * @export
 * @class RemoteListApi
 * @extends {BaseAPI}
 */
export class RemoteListApi extends BaseAPI {
    /**
     * 
     * @param {string} path 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoteListApi
     */
    public remoteList(path: string, options?: RawAxiosRequestConfig) {
        return RemoteListApiFp(this.configuration).remoteList(path, options).then((request) => request(this.axios, this.basePath));
    }
}



